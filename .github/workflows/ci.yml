name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18.x"

jobs:
  validate:
    name: Validate Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: TypeScript compilation check
        run: npm run build

      - name: Run ESLint
        run: npm run lint

      - name: Check for TypeScript errors
        run: npx tsc --noEmit

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [validate, test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Check build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed - dist directory not found"
            exit 1
          fi
          echo "Build successful - dist directory created"
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files-${{ github.sha }}
          path: dist/
          retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for high severity vulnerabilities
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run dependency check
        run: npx audit-ci --moderate

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [validate, test, build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Deploy to preview
        run: |
          echo "Deploying preview for PR #${{ github.event.number }}"
          echo "Preview URL: https://preview-${{ github.event.number }}.your-domain.com"
          # Add your deployment logic here

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [validate, test, build, security]
    if: always()

    steps:
      - name: Notify success
        if: needs.validate.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "‚úÖ All checks passed successfully!"
          echo "üöÄ Ready for deployment"

      - name: Notify failure
        if: needs.validate.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "‚ùå Some checks failed"
          echo "Please review the logs and fix the issues"
          exit 1
